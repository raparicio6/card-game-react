// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App matches the snapshot 1`] = `
<App
  loading={false}
>
  <ApolloProvider
    client={
      DefaultClient {
        "cache": InMemoryCache {
          "addTypename": true,
          "cacheKeyRoot": KeyTrie {
            "weakness": true,
          },
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "freezeResults": false,
            "resultCaching": true,
          },
          "data": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "maybeBroadcastWatch": [Function],
          "optimisticData": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "silenceBroadcast": false,
          "storeReader": StoreReader {
            "executeSelectionSet": [Function],
            "executeStoreQuery": [Function],
            "executeSubSelectedArray": [Function],
            "freezeResults": false,
          },
          "storeWriter": StoreWriter {},
          "typenameDocumentCache": Map {},
          "watches": Set {},
        },
        "clearStoreCallbacks": Array [],
        "defaultOptions": Object {},
        "disableNetworkFetches": false,
        "link": ApolloLink {
          "request": [Function],
        },
        "localState": LocalState {
          "cache": InMemoryCache {
            "addTypename": true,
            "cacheKeyRoot": KeyTrie {
              "weakness": true,
            },
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "freezeResults": false,
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
              "executeSubSelectedArray": [Function],
              "freezeResults": false,
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
          "client": [Circular],
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "queryManager": QueryManager {
          "assumeImmutableResults": false,
          "clientAwareness": Object {
            "name": undefined,
            "version": undefined,
          },
          "dataStore": DataStore {
            "cache": InMemoryCache {
              "addTypename": true,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
          },
          "fetchQueryRejectFns": Map {},
          "idCounter": 1,
          "inFlightLinkObservables": Map {},
          "link": ApolloLink {
            "request": [Function],
          },
          "localState": LocalState {
            "cache": InMemoryCache {
              "addTypename": true,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
            "client": [Circular],
          },
          "mutationStore": MutationStore {
            "store": Object {},
          },
          "onBroadcast": [Function],
          "pollingInfoByQueryId": Map {},
          "queries": Map {},
          "queryDeduplication": true,
          "queryStore": QueryStore {
            "store": Object {},
          },
          "ssrMode": false,
          "transformCache": WeakMap {},
        },
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": Array [],
        "store": DataStore {
          "cache": InMemoryCache {
            "addTypename": true,
            "cacheKeyRoot": KeyTrie {
              "weakness": true,
            },
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "freezeResults": false,
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
              "executeSubSelectedArray": [Function],
              "freezeResults": false,
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
        },
        "typeDefs": undefined,
        "version": "2.6.8",
        "watchQuery": [Function],
      }
    }
  >
    <AppRoutes>
      <BrowserRouter>
        <Router
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
        >
          <Switch>
            <AppRoute
              component={[Function]}
              computedMatch={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              exact={true}
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              path="/"
            >
              <Route
                computedMatch={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
                exact={true}
                location={
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  }
                }
                path="/"
                render={[Function]}
              >
                <HomeContainer
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "createHref": [Function],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                >
                  <Home>
                    <div
                      className="row center background-wild-sand all-screen-height container"
                    >
                      <div
                        className="column m-right-10"
                      >
                        <EntityContainer
                          className=""
                          hp={32}
                          imageUrl="monster.png"
                          maxHp={40}
                          name="Enemy"
                          shield={0}
                        >
                          <Entity
                            className=""
                            hp={32}
                            imageUrl="monster.png"
                            maxHp={40}
                            name="Enemy"
                            shield={0}
                          >
                            <div
                              className="row container "
                            >
                              <div
                                className="column middle entityImageContainer"
                              >
                                <img
                                  alt=""
                                  className="entityImage"
                                  src="monster.png"
                                />
                              </div>
                              <div
                                className="column middle nameHpContainer"
                              >
                                <span
                                  className="info m-bottom-3"
                                >
                                  Enemy
                                </span>
                                <span
                                  className="subtitle m-top-3"
                                >
                                  : 
                                  <span
                                    className="info number"
                                  >
                                    32/40
                                  </span>
                                </span>
                              </div>
                              <div
                                className="shieldContainer m-left-4 row center middle"
                              >
                                <span
                                  className="subtitle shield"
                                >
                                  : 
                                   
                                  <span
                                    className="info numberShield"
                                  >
                                    0
                                  </span>
                                </span>
                              </div>
                            </div>
                          </Entity>
                        </EntityContainer>
                        <EntityContainer
                          className="m-top-6"
                          hp={16}
                          imageUrl="default-entity.png"
                          maxHp={48}
                          name="Player"
                          shield={45}
                        >
                          <Entity
                            className="m-top-6"
                            hp={16}
                            imageUrl="default-entity.png"
                            maxHp={48}
                            name="Player"
                            shield={45}
                          >
                            <div
                              className="row container m-top-6"
                            >
                              <div
                                className="column middle entityImageContainer"
                              >
                                <img
                                  alt=""
                                  className="entityImage"
                                  src="default-entity.png"
                                />
                              </div>
                              <div
                                className="column middle nameHpContainer"
                              >
                                <span
                                  className="info m-bottom-3"
                                >
                                  Player
                                </span>
                                <span
                                  className="subtitle m-top-3"
                                >
                                  : 
                                  <span
                                    className="info number"
                                  >
                                    16/48
                                  </span>
                                </span>
                              </div>
                              <div
                                className="shieldContainer m-left-4 row center middle"
                              >
                                <span
                                  className="subtitle shield"
                                >
                                  : 
                                   
                                  <span
                                    className="info numberShield"
                                  >
                                    45
                                  </span>
                                </span>
                              </div>
                            </div>
                          </Entity>
                        </EntityContainer>
                      </div>
                      <TurnsContainer
                        current={12}
                        left={8}
                        past={11}
                      >
                        <Turns
                          current={12}
                          left={8}
                          past={11}
                        >
                          <div
                            className="column"
                          >
                            <span />
                            <span />
                            <span />
                            <span />
                            <span />
                          </div>
                        </Turns>
                      </TurnsContainer>
                    </div>
                  </Home>
                </HomeContainer>
              </Route>
            </AppRoute>
          </Switch>
        </Router>
      </BrowserRouter>
    </AppRoutes>
  </ApolloProvider>
</App>
`;
